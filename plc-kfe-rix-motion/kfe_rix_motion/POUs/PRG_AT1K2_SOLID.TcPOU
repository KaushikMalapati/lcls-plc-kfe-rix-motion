<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_AT1K2_SOLID" Id="{51ac20ea-82fa-49be-8d38-263aded91896}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_AT1K2_SOLID
VAR
    (* NOTE: use FALSE for simulation and production *)
    (* NOTE: use TRUE when relying on visualization + actual hardware *)
    bDebug : BOOL := FALSE;

    nEnableMode : E_StageEnableMode;

    {attribute 'pytmc' := '
        pv: AT1K2:L2SI:MMS:01

    '}
    {attribute 'TcLinkTo' := '

        .fbRTD_1.iRaw := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 1^Value;
        .fbRTD_1.bError := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 1^Status^Error;
        .fbRTD_1.bUnderrange := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 1^Status^Underrange;
        .fbRTD_1.bOverrange := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 1^Status^Overrange;

        .fbRTD_2.iRaw := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 2^Value;
        .fbRTD_2.bError := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 2^Status^Error;
        .fbRTD_2.bUnderrange := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 2^Status^Underrange;
        .fbRTD_2.bOverrange := TIIB[AT1K2-EL3202-01]^RTD Inputs Channel 2^Status^Overrange

    '}
    fbStage1: FB_SXR_SATT_Stage;

    {attribute 'pytmc' := 'pv: AT1K2:L2SI:MMS:02'}
    {attribute 'TcLinkTo' := '

        .fbRTD_1.iRaw := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 1^Value;
        .fbRTD_1.bError := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 1^Status^Error;
        .fbRTD_1.bUnderrange := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 1^Status^Underrange;
        .fbRTD_1.bOverrange := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 1^Status^Overrange;

        .fbRTD_2.iRaw := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 2^Value;
        .fbRTD_2.bError := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 2^Status^Error;
        .fbRTD_2.bUnderrange := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 2^Status^Underrange;
        .fbRTD_2.bOverrange := TIIB[AT1K2-EL3202-02]^RTD Inputs Channel 2^Status^Overrange
    '}
    fbStage2: FB_SXR_SATT_Stage;

    // Special case: inspection mirror
    {attribute 'pytmc' := 'pv: AT1K2:L2SI:MMS:03'}
    fbStage3: FB_PositionState1D_InOut;
    bStage3Init: BOOL;
    fbMotionStage3: FB_MotionStage;
    stMirrorOut: ST_PositionState;
    stMirrorIn: ST_PositionState;
    // Consider transmission=1 if out, transmission=0 if in
    fMirrorTrans: LREAL;
    // Fault unless the mirror is out
    fbFFMirror: FB_FastFault := (
        i_Desc := 'Mirror is not out',
        i_TypeCode := E_MotionFFType.DEVICE_MOVE,
        i_xAutoReset := TRUE
    );

    fbStateSetup: FB_StateSetupHelper;
    stDefaultGood: ST_PositionState := (
        fDelta := 0.2,
        fVelocity := 1,
        bMoveOk := TRUE,
        bValid := TRUE
    );
    fbBadStateSetup: FB_StateSetupHelper;
    stDefaultBad: ST_PositionState := (
        fPosition := 500,
        fDelta := 0.2,
        fVelocity := 1,
        bMoveOk := FALSE,
        bValid := FALSE
    );

    {attribute 'pytmc' :='pv: AT1K2:L2SI:FWM'}
    {attribute 'TcLinkTo' := '.iRaw := TIIB[AT1K2-EL3052-E8]^AI Standard Channel 1^Value'}
    fbFlowMeter: FB_AnalogInput := (iTermBits:=15, fTermMax:=60, fTermMin:=0);

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bDebug THEN
    // NEVER: checkouts with the TwinCAT NC GUI.
    nEnableMode := E_StageEnableMode.NEVER;
ELSE
    // ALWAYS: want active position correction at all times
    nEnableMode := E_StageEnableMode.ALWAYS;
END_IF

(*

    Solid Attenuator notes

    AT1K2 is JJ-xray SN-11343.

    JJ    Label   EPICS    Stage     NC   Location

    10XX      1   MMS:01   fbStage1  M25  Upstream-most
    10XX      2   MMS:02   fbStage2  M26  Downstream-most
    10XX      3   MMS:03   fbStage3  M27  Mirror Insertion Stage

*)

fbStateSetup(stPositionState:=stDefaultGood, bSetDefault:=TRUE);
fbBadStateSetup(stPositionState:=stDefaultBad, bSetDefault:=TRUE);


(* State setup - stage 1 *)
fbStateSetup(stPositionState:=fbStage1.stOut, sName:='Out', fPosition:=22.00);

fbBadStateSetup(stPositionState:=fbStage1.stFilter1, sName:='Filter 1');
fbStage1.arrFilters[1].fFilterThickness_um := 0;
fbStage1.arrFilters[1].sFilterMaterial     := '';

fbBadStateSetup(stPositionState:=fbStage1.stFilter2, sName:='Filter 2');
fbStage1.arrFilters[2].fFilterThickness_um := 0;
fbStage1.arrFilters[2].sFilterMaterial     := '';

fbStateSetup(stPositionState:=fbStage1.stFilter3, sName:='(3) 11.5 um Al', fPosition:=75.0);
fbStage1.arrFilters[3].fFilterThickness_um := 11.5;
fbStage1.arrFilters[3].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage1.stFilter4, sName:='(4) 6.18 um Al', fPosition:=90.5);
fbStage1.arrFilters[4].fFilterThickness_um := 6.18;
fbStage1.arrFilters[4].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage1.stFilter5, sName:='(5) 2.85 um Al', fPosition:=105.5);
fbStage1.arrFilters[5].fFilterThickness_um := 2.85;
fbStage1.arrFilters[5].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage1.stFilter6, sName:='(6) 1.52 um Al', fPosition:=122.0);
fbStage1.arrFilters[6].fFilterThickness_um := 1.52;
fbStage1.arrFilters[6].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage1.stFilter7, sName:='(7) 0.78 um Al', fPosition:=136.5);
fbStage1.arrFilters[7].fFilterThickness_um := 0.78;
fbStage1.arrFilters[7].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage1.stFilter8, sName:='(8) 0.39 um Al', fPosition:=152.2);
fbStage1.arrFilters[8].fFilterThickness_um := 0.39;
fbStage1.arrFilters[8].sFilterMaterial     := 'Al';

fbStage1(stAxis:=Main.M25, nEnableMode:=nEnableMode, fbFFHWO:=GVL.fbFastFaultOutput2, bEnable:=TRUE);


(* State setup - stage 2 *)
fbStateSetup(stPositionState:=fbStage2.stOut, sName:='Out', fPosition:=22.00);

fbBadStateSetup(stPositionState:=fbStage2.stFilter1, sName:='Filter 1');
fbStage2.arrFilters[1].fFilterThickness_um := 0;
fbStage2.arrFilters[1].sFilterMaterial     := '';

fbBadStateSetup(stPositionState:=fbStage2.stFilter2, sName:='Filter 2');
fbStage2.arrFilters[2].fFilterThickness_um := 0;
fbStage2.arrFilters[2].sFilterMaterial     := '';

fbStateSetup(stPositionState:=fbStage2.stFilter3, sName:='(3) 11.5 um Al', fPosition:=75.0);
fbStage2.arrFilters[3].fFilterThickness_um := 11.5;
fbStage2.arrFilters[3].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage2.stFilter4, sName:='(4) 6.18 um Al', fPosition:=90.5);
fbStage2.arrFilters[4].fFilterThickness_um := 6.18;
fbStage2.arrFilters[4].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage2.stFilter5, sName:='(5) 1.52 um Al', fPosition:=105.5);
fbStage2.arrFilters[5].fFilterThickness_um := 1.52;
fbStage2.arrFilters[5].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage2.stFilter6, sName:='(6) 0.78 um Al', fPosition:=122.0);
fbStage2.arrFilters[6].fFilterThickness_um := 0.78;
fbStage2.arrFilters[6].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage2.stFilter7, sName:='(7) 0.39 um Al', fPosition:=136.5);
fbStage2.arrFilters[7].fFilterThickness_um := 0.39;
fbStage2.arrFilters[7].sFilterMaterial     := 'Al';

fbStateSetup(stPositionState:=fbStage2.stFilter8, sName:='(8) 0.2 um Al', fPosition:=152.2);
fbStage2.arrFilters[8].fFilterThickness_um := 0.2;
fbStage2.arrFilters[8].sFilterMaterial     := 'Al';

fbStage2(stAxis:=Main.M26, nEnableMode:=nEnableMode, fbFFHWO:=GVL.fbFastFaultOutput2, bEnable:=TRUE);

(* State setup - stage 3 *)
fbStateSetup(stPositionState:=stMirrorOut, sName:='Out', fPosition:=65.00);
fbStateSetup(stPositionState:=stMirrorIn, sName:='In', fPosition:=25.00);

IF NOT bStage3Init THEN
    bStage3Init := TRUE;
    Main.M27.bHardwareEnable      := TRUE;
    Main.M27.bLimitBackwardEnable := TRUE;
    Main.M27.bLimitForwardEnable  := TRUE;
    Main.M27.bPowerSelf           := TRUE;
    Main.M27.nBrakeMode           := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M27.nHomingMode          := ENUM_EpicsHomeCmd.NONE;
END_IF

fbStage3(
    stMotionStage:=Main.M27,
    stOut:=stMirrorOut,
    stIn:=stMirrorIn,
);
fbMotionStage3(stMotionStage:=Main.M27);

IF fbStage3.eStateGet = E_EpicsInOut.OUT THEN
    fMirrorTrans := 1.0;
ELSE
    fMirrorTrans := 0.0;
END_IF

fbFFMirror(
    i_DevName := Main.M27.sName,
    i_xOK := fbStage3.eStateGet = E_EpicsInOut.OUT,
    io_fbFFHWO := GVL.fbFastFaultOutput2,
);

GVL.rCurTrans[PMPS.K_Attenuators.AT1K2].nTran := LREAL_TO_REAL(
    fbStage1.fTransmission *
    fbStage2.fTransmission *
    fMirrorTrans
);

fbFlowMeter();
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>